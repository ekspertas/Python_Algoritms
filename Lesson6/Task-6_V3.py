"""
    Подсчитать, сколько было выделено памяти под переменные в ранее разработанных программах в рамках первых
    трех уроков. Проанализировать результат и определить программы с наиболее эффективным использованием памяти.

    Условие задачи:
    Сформировать из введенного числа обратное по порядку входящих в него цифр и вывести на экран.
    Например, если введено число 3486, то надо вывести число 6843.

    https://drive.google.com/file/d/10Q1r4ooc2-w_mgZgrBY4zqUlYibBHdQI/view?usp=sharing

    Вариант №3
"""

import sys


def show(obj):
    print(f'{type(obj)=}, {sys.getsizeof(obj)=}, {obj=}')
    if hasattr(obj, '__iter__'):
        if hasattr(obj, 'items'):
            for key, value in object.items():
                show(key)
                show(value)
            else:
                for item in obj:
                    show(item)


user_number = list(input('Введите целое положительно число: '))
user_number.reverse()
print('Обратное порядку входящих цифр число:', ''.join(user_number))

show(user_number)

"""
    Результат работы программы:
    Введите целое положительно число: 0
    Обратное порядку входящих цифр число: 0
    type(obj)=<class 'list'>, sys.getsizeof(obj)=64, obj=['0']
    ***********************************************************
    Введите целое положительно число: 1234
    Обратное порядку входящих цифр число: 4321
    type(obj)=<class 'list'>, sys.getsizeof(obj)=88, obj=['4', '3', '2', '1']
"""

"""
    Вывод:
    Для анализа применялась функция написанная на уроке.
    Изменения не вносил, т.к. была интересна информация не только о памяти, выделенной под переменную,
    но и ее тип, и состояние на момент анализа.
    Программа для атализа тоже не самая интересная, но с возможностью реализации кода, применяя разные
    типы переменных.
    
    В V1 код программы остался без изменений. Используются 6 перемееных. 3 переменных типа int и 3 - типа str.
    Переменные типа int занимают в памяти 28 байт (только если переменная = 0, 24 байта).
    Переменные типа str занимают в памяти при инициализации (объявлении пустой строки или при 1 символе в строке) 
    50 байт и в процессе залолнения изпользуемая память увеличивается в соответсвии с количеством символов в строке 
    ( по 1 байту на каждый дополнительный символ в строке), в тестовом примере до 53 байт - 4 символа, при 8 символах
     - 57 байт, при 12 символах - 61 байт и т.д.).
    
    В коде программы V2 используется одна переменная типа str, занимающая от 50 байт при 1 символе с строке и
    увеличивается на 1 байт при увеличении строки на 1 символ.
    
    В коде программы V3 используется также одна переменная, но типа list. Этот тип занимает 64 байта памяти, при
    1 символе в списке, 72 байта - при 2-х символах в списке, 80 байт - при 3-х символах, т.е. при увеличении списка 
    на 1 символ, используемая память увеличивается на 8 байт.
    
    Вывод:
    При решении задания меньше всего памяти используется, если тип переменной str (код V2) и больше всего, если тип 
    переменной list (код V3). Даже код  V1 будет менее затратен в использовании памяти при значительном увеличении
    количества символов, чем код V3 ( при 20 символах по 28 байт на каждую переменную типа int  и 69 байт - типа str,
    и type(obj)=<class 'list'>, sys.getsizeof(obj)=216 байт на одну переменную).

    Информвация о системе:
    Windows 10 64 bit
    Python 3.9
"""
